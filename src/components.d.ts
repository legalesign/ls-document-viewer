/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LSApiTemplate } from "./types/LSApiTemplate";
import { LSApiElement } from "./types/LSApiElement";
import { LSMutateEvent } from "./types/LSMutateEvent";
import { LSApiElement as LSApiElement1, LSApiTemplate as LSApiTemplate1, LsDocumentViewer as LsDocumentViewer1, LSMutateEvent as LSMutateEvent1 } from "./components";
import { LsDocumentViewer } from "./components/ls-document-viewer/ls-document-viewer";
import { Icon } from "./types/Icon";
import { LSApiRole } from "./types/LSApiRole";
export { LSApiTemplate } from "./types/LSApiTemplate";
export { LSApiElement } from "./types/LSApiElement";
export { LSMutateEvent } from "./types/LSMutateEvent";
export { LSApiElement as LSApiElement1, LSApiTemplate as LSApiTemplate1, LsDocumentViewer as LsDocumentViewer1, LSMutateEvent as LSMutateEvent1 } from "./components";
export { LsDocumentViewer } from "./components/ls-document-viewer/ls-document-viewer";
export { Icon } from "./types/Icon";
export { LSApiRole } from "./types/LSApiRole";
export namespace Components {
    interface LsDocumentOptions {
        /**
          * The base template information (as JSON). {LSApiTemplate}
         */
        "template": LSApiTemplate;
    }
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsDocumentViewer {
        /**
          * Shows the table view of fields rather than the preview. {boolean}
          * @default false
         */
        "displayTable"?: boolean;
        /**
          * Whether or not the fields list is expanded. {boolean}
          * @default false
         */
        "expandfields"?: boolean;
        /**
          * Determines / sets which of the far left 'managers' is active. {'document' | 'toolbox' | 'participant' }
          * @default 'toolbox'
         */
        "manager": 'document' | 'toolbox' | 'participant';
        /**
          * An ease of use property that will arrange document-viewer appropraitely. {'preview' | 'editor' | 'custom'}
          * @default 'custom'
         */
        "mode": 'preview' | 'editor' | 'custom';
        /**
          * Page forward {MouseEvent} e
         */
        "pageNext": () => Promise<void>;
        /**
          * @default 1
         */
        "pageNum": number;
        /**
          * Page backward e
         */
        "pagePrev": () => Promise<void>;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Allows you to change the colours used for each role in the template. {SignerColor[]}
          * @default defaultRolePalette
         */
        "roleColors"?: string[];
        /**
          * Page and field resize on zoom change
         */
        "setZoom": (z: number) => Promise<void>;
        /**
          * Whether the page previewvertical ribbon will be shown {boolean}
          * @default false
         */
        "showpagepreview"?: boolean;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
          * @default false
         */
        "showrightpanel"?: boolean;
        /**
          * Whether the bottom statusbar is displayed. {boolean}
          * @default false
         */
        "showstatusbar"?: boolean;
        /**
          * Whether the table view of the fields on this template is available to the user. {boolean}
          * @default false
         */
        "showtableview"?: boolean;
        /**
          * Whether the top toolbar is displayed. {boolean}
          * @default false
         */
        "showtoolbar"?: boolean;
        /**
          * Whether the left hand toolbox is displayed. {boolean}
          * @default false
         */
        "showtoolbox"?: boolean;
        /**
          * @default 0
         */
        "signer": number;
        /**
          * The initial template data, including the link for background PDF. See README and example for correct GraphQL query and data structure. {LSApiTemplate}
         */
        "template": string;
        /**
          * The id of the template you want to load (if using the internal data adapter). {string}
         */
        "templateid": string;
        /**
          * The access token of the account your want the widget to use, you should normally acquire this with a server side call using that accounts login credentials. {string}
         */
        "token": string;
        /**
          * If supplied ONLY items in this | ("or") delimited list will be shown. i.e. "signature|intials" {boolean}
          * @default null
         */
        "toolboxFilter"?: string;
        /**
          * @default 1.0
         */
        "zoom": number;
    }
    interface LsEditorField {
        "dataItem": LSApiElement1;
        "page": { height: number; width: number };
        "palette": string[];
        "readonly": boolean;
        "selected": boolean;
        "type": 'text' | 'signature' | 'date' | 'regex' | 'file' | 'number' | 'autodate';
    }
    interface LsEditorTable {
        /**
          * The parent editor control. {LsDocumentViewer}
         */
        "editor": LsDocumentViewer;
    }
    interface LsFeatureColumn {
        /**
          * Determines / sets which of the far left 'managers' is active. {'document' | 'toolbox' | 'participant' }
          * @default 'toolbox'
         */
        "manager": 'document' | 'toolbox' | 'participant';
    }
    interface LsFieldAlignment {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldDimensions {
        "dataItem": LSApiElement1 | LSApiElement1[];
    }
    interface LsFieldDistribute {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldFormat {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldPlacement {
        "dataItem": LSApiElement1 | LSApiElement1[];
    }
    interface LsFieldProperties {
        "dataItem": LSApiElement[];
    }
    interface LsFieldPropertiesAutosign {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesDate {
        "dataItem": LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet": 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesEmail {
        "dataItem": LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet": 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesFile {
        "dataItem": LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet": 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesGeneral {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesImage {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesMultiple {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldPropertiesNumber {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesSignature {
        "dataItem": LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet": 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesText {
        "dataItem": LSApiElement1;
    }
    interface LsFieldSize {
        "dataItem": LSApiElement1[];
    }
    interface LsFormfield {
        "aria"?: string;
        /**
          * @default 'text'
         */
        "as"?: 'text' | 'select' | 'radio' | 'textarea' | 'password' | 'number' | 'displayonly';
        "buttonClick"?: () => void;
        "buttonIcon"?: Icon;
        "count": boolean;
        "countMax"?: number;
        "descriptionText"?: string;
        "dirty": boolean;
        "disabled": boolean;
        "errorText"?: string;
        /**
          * @default 'none'
         */
        "extraLabel": 'optional' | 'required' | 'none';
        "fieldIcon"?: Icon;
        "fieldId": string;
        "hoverTooltipText"?: string;
        "infoTooltipText"?: string;
        "inputRef"?: string;
        "label"?: string;
        "labelIcon"?: Icon;
        "name": string;
        "placeholder"?: string;
        "required": boolean;
        "valid": boolean;
        "value"?: string | number;
    }
    interface LsIcon {
        "customStyle"?: { [key: string]: string };
        "name"?: Icon;
        /**
          * @default "20"
         */
        "size"?: string;
        /**
          * @default false
         */
        "solid"?: boolean;
    }
    interface LsNumberInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "countMax": number;
        "dirty": boolean;
        "disabled": boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name": string;
        "placeholder"?: string;
        "required": boolean;
        /**
          * @default 'ls'
         */
        "type": 'basic' | 'ls';
        "valid": boolean;
        /**
          * @default 0
         */
        "value": number;
    }
    interface LsParticipantManager {
        /**
          * The base template information (as JSON). {LSDocumentViewer}
         */
        "editor": LsDocumentViewer;
        /**
          * The base template information (as JSON). {LSApiTemplate}
         */
        "template": LSApiTemplate;
    }
    interface LsParticipantSelect {
        "dataItem": LSApiElement1[];
        /**
          * The current template roles. {LSApiRole}
          * @default []
         */
        "roles"?: LSApiRole[];
    }
    interface LsRadioInput {
        /**
          * @default false
         */
        "checked": boolean;
        "customStyle"?: { [key: string]: string };
        /**
          * @default false
         */
        "disabled"?: boolean;
        "icon"?: Icon;
        "label": string;
        /**
          * @default 'name'
         */
        "name"?: string;
        "radioId": string;
    }
    interface LsSelectInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "dirty": boolean;
        "disabled": boolean;
        "displayOnly": boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name": string;
        "required": boolean;
        "valid": boolean;
        "value": string;
    }
    interface LsStatusbar {
        /**
          * The parent editor control. {LsDocumentViewer}
         */
        "editor": LsDocumentViewer;
        /**
          * The zoom or scale level 100 === 100%. {number}
         */
        "zoom": number;
    }
    interface LsTextInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "countMax": number;
        "dirty": boolean;
        "disabled": boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name": string;
        "placeholder"?: string;
        "required": boolean;
        /**
          * @default 'default'
         */
        "type": 'default' | 'password' | 'displayonly';
        "valid": boolean;
        "value": string;
    }
    interface LsTextareaInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "countMax": number;
        "dirty": boolean;
        "disabled": boolean;
        "displayOnly": boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name": string;
        "placeholder"?: string;
        "required": boolean;
        "valid": boolean;
        "value"?: string;
    }
    interface LsToggle {
    }
    interface LsToolbar {
        /**
          * The selected items information (as JSON). {LSApiElement[]}
         */
        "dataItem": LSApiElement1[];
        /**
          * The base template information (as JSON). {LSDocumentViewer}
         */
        "editor": LsDocumentViewer1;
        /**
          * The base template information (as JSON). {LSApiTemplate}
         */
        "template": LSApiTemplate1;
    }
    interface LsToolboxField {
        /**
          * The signer color of the element
          * @default 'primary'
         */
        "color": string;
        /**
          * The starting height of this control type in pixels.
         */
        "defaultHeight": number;
        /**
          * The starting width of this control type in pixels.
         */
        "defaultWidth": number;
        "elementType": string;
        /**
          * The field type of this toolbox item, e.g. 'signature'. Note these should always be lowercase.
         */
        "formElementType": string;
        /**
          * The icon to display for this field type.
         */
        "icon": Icon;
        /**
          * The text to display for this field type.
         */
        "label": string;
        /**
          * @default 0
         */
        "validation": number;
    }
}
export interface LsDocumentViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsDocumentViewerElement;
}
export interface LsFeatureColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFeatureColumnElement;
}
export interface LsFieldAlignmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldAlignmentElement;
}
export interface LsFieldDimensionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldDimensionsElement;
}
export interface LsFieldDistributeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldDistributeElement;
}
export interface LsFieldFormatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldFormatElement;
}
export interface LsFieldPlacementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldPlacementElement;
}
export interface LsFieldSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldSizeElement;
}
export interface LsParticipantManagerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsParticipantManagerElement;
}
export interface LsParticipantSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsParticipantSelectElement;
}
export interface LsToolbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsToolbarElement;
}
declare global {
    interface HTMLLsDocumentOptionsElement extends Components.LsDocumentOptions, HTMLStencilElement {
    }
    var HTMLLsDocumentOptionsElement: {
        prototype: HTMLLsDocumentOptionsElement;
        new (): HTMLLsDocumentOptionsElement;
    };
    interface HTMLLsDocumentViewerElementEventMap {
        "pageRendered": number;
        "pageChange": number;
        "selectFields": LSApiElement[];
        "mutate": LSMutateEvent[];
        "update": LSMutateEvent[];
    }
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface HTMLLsDocumentViewerElement extends Components.LsDocumentViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsDocumentViewerElementEventMap>(type: K, listener: (this: HTMLLsDocumentViewerElement, ev: LsDocumentViewerCustomEvent<HTMLLsDocumentViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsDocumentViewerElementEventMap>(type: K, listener: (this: HTMLLsDocumentViewerElement, ev: LsDocumentViewerCustomEvent<HTMLLsDocumentViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsDocumentViewerElement: {
        prototype: HTMLLsDocumentViewerElement;
        new (): HTMLLsDocumentViewerElement;
    };
    interface HTMLLsEditorFieldElement extends Components.LsEditorField, HTMLStencilElement {
    }
    var HTMLLsEditorFieldElement: {
        prototype: HTMLLsEditorFieldElement;
        new (): HTMLLsEditorFieldElement;
    };
    interface HTMLLsEditorTableElement extends Components.LsEditorTable, HTMLStencilElement {
    }
    var HTMLLsEditorTableElement: {
        prototype: HTMLLsEditorTableElement;
        new (): HTMLLsEditorTableElement;
    };
    interface HTMLLsFeatureColumnElementEventMap {
        "manage": 'document' | 'toolbox' | 'participant';
    }
    interface HTMLLsFeatureColumnElement extends Components.LsFeatureColumn, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFeatureColumnElementEventMap>(type: K, listener: (this: HTMLLsFeatureColumnElement, ev: LsFeatureColumnCustomEvent<HTMLLsFeatureColumnElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFeatureColumnElementEventMap>(type: K, listener: (this: HTMLLsFeatureColumnElement, ev: LsFeatureColumnCustomEvent<HTMLLsFeatureColumnElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFeatureColumnElement: {
        prototype: HTMLLsFeatureColumnElement;
        new (): HTMLLsFeatureColumnElement;
    };
    interface HTMLLsFieldAlignmentElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldAlignmentElement extends Components.LsFieldAlignment, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldAlignmentElementEventMap>(type: K, listener: (this: HTMLLsFieldAlignmentElement, ev: LsFieldAlignmentCustomEvent<HTMLLsFieldAlignmentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldAlignmentElementEventMap>(type: K, listener: (this: HTMLLsFieldAlignmentElement, ev: LsFieldAlignmentCustomEvent<HTMLLsFieldAlignmentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldAlignmentElement: {
        prototype: HTMLLsFieldAlignmentElement;
        new (): HTMLLsFieldAlignmentElement;
    };
    interface HTMLLsFieldDimensionsElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldDimensionsElement extends Components.LsFieldDimensions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldDimensionsElementEventMap>(type: K, listener: (this: HTMLLsFieldDimensionsElement, ev: LsFieldDimensionsCustomEvent<HTMLLsFieldDimensionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldDimensionsElementEventMap>(type: K, listener: (this: HTMLLsFieldDimensionsElement, ev: LsFieldDimensionsCustomEvent<HTMLLsFieldDimensionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldDimensionsElement: {
        prototype: HTMLLsFieldDimensionsElement;
        new (): HTMLLsFieldDimensionsElement;
    };
    interface HTMLLsFieldDistributeElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldDistributeElement extends Components.LsFieldDistribute, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldDistributeElementEventMap>(type: K, listener: (this: HTMLLsFieldDistributeElement, ev: LsFieldDistributeCustomEvent<HTMLLsFieldDistributeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldDistributeElementEventMap>(type: K, listener: (this: HTMLLsFieldDistributeElement, ev: LsFieldDistributeCustomEvent<HTMLLsFieldDistributeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldDistributeElement: {
        prototype: HTMLLsFieldDistributeElement;
        new (): HTMLLsFieldDistributeElement;
    };
    interface HTMLLsFieldFormatElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldFormatElement extends Components.LsFieldFormat, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldFormatElementEventMap>(type: K, listener: (this: HTMLLsFieldFormatElement, ev: LsFieldFormatCustomEvent<HTMLLsFieldFormatElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldFormatElementEventMap>(type: K, listener: (this: HTMLLsFieldFormatElement, ev: LsFieldFormatCustomEvent<HTMLLsFieldFormatElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldFormatElement: {
        prototype: HTMLLsFieldFormatElement;
        new (): HTMLLsFieldFormatElement;
    };
    interface HTMLLsFieldPlacementElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldPlacementElement extends Components.LsFieldPlacement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldPlacementElementEventMap>(type: K, listener: (this: HTMLLsFieldPlacementElement, ev: LsFieldPlacementCustomEvent<HTMLLsFieldPlacementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldPlacementElementEventMap>(type: K, listener: (this: HTMLLsFieldPlacementElement, ev: LsFieldPlacementCustomEvent<HTMLLsFieldPlacementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldPlacementElement: {
        prototype: HTMLLsFieldPlacementElement;
        new (): HTMLLsFieldPlacementElement;
    };
    interface HTMLLsFieldPropertiesElement extends Components.LsFieldProperties, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesElement: {
        prototype: HTMLLsFieldPropertiesElement;
        new (): HTMLLsFieldPropertiesElement;
    };
    interface HTMLLsFieldPropertiesAutosignElement extends Components.LsFieldPropertiesAutosign, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesAutosignElement: {
        prototype: HTMLLsFieldPropertiesAutosignElement;
        new (): HTMLLsFieldPropertiesAutosignElement;
    };
    interface HTMLLsFieldPropertiesDateElement extends Components.LsFieldPropertiesDate, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesDateElement: {
        prototype: HTMLLsFieldPropertiesDateElement;
        new (): HTMLLsFieldPropertiesDateElement;
    };
    interface HTMLLsFieldPropertiesEmailElement extends Components.LsFieldPropertiesEmail, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesEmailElement: {
        prototype: HTMLLsFieldPropertiesEmailElement;
        new (): HTMLLsFieldPropertiesEmailElement;
    };
    interface HTMLLsFieldPropertiesFileElement extends Components.LsFieldPropertiesFile, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesFileElement: {
        prototype: HTMLLsFieldPropertiesFileElement;
        new (): HTMLLsFieldPropertiesFileElement;
    };
    interface HTMLLsFieldPropertiesGeneralElement extends Components.LsFieldPropertiesGeneral, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesGeneralElement: {
        prototype: HTMLLsFieldPropertiesGeneralElement;
        new (): HTMLLsFieldPropertiesGeneralElement;
    };
    interface HTMLLsFieldPropertiesImageElement extends Components.LsFieldPropertiesImage, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesImageElement: {
        prototype: HTMLLsFieldPropertiesImageElement;
        new (): HTMLLsFieldPropertiesImageElement;
    };
    interface HTMLLsFieldPropertiesMultipleElement extends Components.LsFieldPropertiesMultiple, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesMultipleElement: {
        prototype: HTMLLsFieldPropertiesMultipleElement;
        new (): HTMLLsFieldPropertiesMultipleElement;
    };
    interface HTMLLsFieldPropertiesNumberElement extends Components.LsFieldPropertiesNumber, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesNumberElement: {
        prototype: HTMLLsFieldPropertiesNumberElement;
        new (): HTMLLsFieldPropertiesNumberElement;
    };
    interface HTMLLsFieldPropertiesSignatureElement extends Components.LsFieldPropertiesSignature, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesSignatureElement: {
        prototype: HTMLLsFieldPropertiesSignatureElement;
        new (): HTMLLsFieldPropertiesSignatureElement;
    };
    interface HTMLLsFieldPropertiesTextElement extends Components.LsFieldPropertiesText, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesTextElement: {
        prototype: HTMLLsFieldPropertiesTextElement;
        new (): HTMLLsFieldPropertiesTextElement;
    };
    interface HTMLLsFieldSizeElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldSizeElement extends Components.LsFieldSize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldSizeElementEventMap>(type: K, listener: (this: HTMLLsFieldSizeElement, ev: LsFieldSizeCustomEvent<HTMLLsFieldSizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldSizeElementEventMap>(type: K, listener: (this: HTMLLsFieldSizeElement, ev: LsFieldSizeCustomEvent<HTMLLsFieldSizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldSizeElement: {
        prototype: HTMLLsFieldSizeElement;
        new (): HTMLLsFieldSizeElement;
    };
    interface HTMLLsFormfieldElement extends Components.LsFormfield, HTMLStencilElement {
    }
    var HTMLLsFormfieldElement: {
        prototype: HTMLLsFormfieldElement;
        new (): HTMLLsFormfieldElement;
    };
    interface HTMLLsIconElement extends Components.LsIcon, HTMLStencilElement {
    }
    var HTMLLsIconElement: {
        prototype: HTMLLsIconElement;
        new (): HTMLLsIconElement;
    };
    interface HTMLLsNumberInputElement extends Components.LsNumberInput, HTMLStencilElement {
    }
    var HTMLLsNumberInputElement: {
        prototype: HTMLLsNumberInputElement;
        new (): HTMLLsNumberInputElement;
    };
    interface HTMLLsParticipantManagerElementEventMap {
        "mutate": LSMutateEvent[];
        "update": LSMutateEvent[];
    }
    interface HTMLLsParticipantManagerElement extends Components.LsParticipantManager, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsParticipantManagerElementEventMap>(type: K, listener: (this: HTMLLsParticipantManagerElement, ev: LsParticipantManagerCustomEvent<HTMLLsParticipantManagerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsParticipantManagerElementEventMap>(type: K, listener: (this: HTMLLsParticipantManagerElement, ev: LsParticipantManagerCustomEvent<HTMLLsParticipantManagerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsParticipantManagerElement: {
        prototype: HTMLLsParticipantManagerElement;
        new (): HTMLLsParticipantManagerElement;
    };
    interface HTMLLsParticipantSelectElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
        "roleChange": number;
    }
    interface HTMLLsParticipantSelectElement extends Components.LsParticipantSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsParticipantSelectElementEventMap>(type: K, listener: (this: HTMLLsParticipantSelectElement, ev: LsParticipantSelectCustomEvent<HTMLLsParticipantSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsParticipantSelectElementEventMap>(type: K, listener: (this: HTMLLsParticipantSelectElement, ev: LsParticipantSelectCustomEvent<HTMLLsParticipantSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsParticipantSelectElement: {
        prototype: HTMLLsParticipantSelectElement;
        new (): HTMLLsParticipantSelectElement;
    };
    interface HTMLLsRadioInputElement extends Components.LsRadioInput, HTMLStencilElement {
    }
    var HTMLLsRadioInputElement: {
        prototype: HTMLLsRadioInputElement;
        new (): HTMLLsRadioInputElement;
    };
    interface HTMLLsSelectInputElement extends Components.LsSelectInput, HTMLStencilElement {
    }
    var HTMLLsSelectInputElement: {
        prototype: HTMLLsSelectInputElement;
        new (): HTMLLsSelectInputElement;
    };
    interface HTMLLsStatusbarElement extends Components.LsStatusbar, HTMLStencilElement {
    }
    var HTMLLsStatusbarElement: {
        prototype: HTMLLsStatusbarElement;
        new (): HTMLLsStatusbarElement;
    };
    interface HTMLLsTextInputElement extends Components.LsTextInput, HTMLStencilElement {
    }
    var HTMLLsTextInputElement: {
        prototype: HTMLLsTextInputElement;
        new (): HTMLLsTextInputElement;
    };
    interface HTMLLsTextareaInputElement extends Components.LsTextareaInput, HTMLStencilElement {
    }
    var HTMLLsTextareaInputElement: {
        prototype: HTMLLsTextareaInputElement;
        new (): HTMLLsTextareaInputElement;
    };
    interface HTMLLsToggleElement extends Components.LsToggle, HTMLStencilElement {
    }
    var HTMLLsToggleElement: {
        prototype: HTMLLsToggleElement;
        new (): HTMLLsToggleElement;
    };
    interface HTMLLsToolbarElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsToolbarElement extends Components.LsToolbar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsToolbarElementEventMap>(type: K, listener: (this: HTMLLsToolbarElement, ev: LsToolbarCustomEvent<HTMLLsToolbarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsToolbarElementEventMap>(type: K, listener: (this: HTMLLsToolbarElement, ev: LsToolbarCustomEvent<HTMLLsToolbarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsToolbarElement: {
        prototype: HTMLLsToolbarElement;
        new (): HTMLLsToolbarElement;
    };
    interface HTMLLsToolboxFieldElement extends Components.LsToolboxField, HTMLStencilElement {
    }
    var HTMLLsToolboxFieldElement: {
        prototype: HTMLLsToolboxFieldElement;
        new (): HTMLLsToolboxFieldElement;
    };
    interface HTMLElementTagNameMap {
        "ls-document-options": HTMLLsDocumentOptionsElement;
        "ls-document-viewer": HTMLLsDocumentViewerElement;
        "ls-editor-field": HTMLLsEditorFieldElement;
        "ls-editor-table": HTMLLsEditorTableElement;
        "ls-feature-column": HTMLLsFeatureColumnElement;
        "ls-field-alignment": HTMLLsFieldAlignmentElement;
        "ls-field-dimensions": HTMLLsFieldDimensionsElement;
        "ls-field-distribute": HTMLLsFieldDistributeElement;
        "ls-field-format": HTMLLsFieldFormatElement;
        "ls-field-placement": HTMLLsFieldPlacementElement;
        "ls-field-properties": HTMLLsFieldPropertiesElement;
        "ls-field-properties-autosign": HTMLLsFieldPropertiesAutosignElement;
        "ls-field-properties-date": HTMLLsFieldPropertiesDateElement;
        "ls-field-properties-email": HTMLLsFieldPropertiesEmailElement;
        "ls-field-properties-file": HTMLLsFieldPropertiesFileElement;
        "ls-field-properties-general": HTMLLsFieldPropertiesGeneralElement;
        "ls-field-properties-image": HTMLLsFieldPropertiesImageElement;
        "ls-field-properties-multiple": HTMLLsFieldPropertiesMultipleElement;
        "ls-field-properties-number": HTMLLsFieldPropertiesNumberElement;
        "ls-field-properties-signature": HTMLLsFieldPropertiesSignatureElement;
        "ls-field-properties-text": HTMLLsFieldPropertiesTextElement;
        "ls-field-size": HTMLLsFieldSizeElement;
        "ls-formfield": HTMLLsFormfieldElement;
        "ls-icon": HTMLLsIconElement;
        "ls-number-input": HTMLLsNumberInputElement;
        "ls-participant-manager": HTMLLsParticipantManagerElement;
        "ls-participant-select": HTMLLsParticipantSelectElement;
        "ls-radio-input": HTMLLsRadioInputElement;
        "ls-select-input": HTMLLsSelectInputElement;
        "ls-statusbar": HTMLLsStatusbarElement;
        "ls-text-input": HTMLLsTextInputElement;
        "ls-textarea-input": HTMLLsTextareaInputElement;
        "ls-toggle": HTMLLsToggleElement;
        "ls-toolbar": HTMLLsToolbarElement;
        "ls-toolbox-field": HTMLLsToolboxFieldElement;
    }
}
declare namespace LocalJSX {
    interface LsDocumentOptions {
        /**
          * The base template information (as JSON). {LSApiTemplate}
         */
        "template"?: LSApiTemplate;
    }
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsDocumentViewer {
        /**
          * Shows the table view of fields rather than the preview. {boolean}
          * @default false
         */
        "displayTable"?: boolean;
        /**
          * Whether or not the fields list is expanded. {boolean}
          * @default false
         */
        "expandfields"?: boolean;
        /**
          * Determines / sets which of the far left 'managers' is active. {'document' | 'toolbox' | 'participant' }
          * @default 'toolbox'
         */
        "manager"?: 'document' | 'toolbox' | 'participant';
        /**
          * An ease of use property that will arrange document-viewer appropraitely. {'preview' | 'editor' | 'custom'}
          * @default 'custom'
         */
        "mode"?: 'preview' | 'editor' | 'custom';
        "onMutate"?: (event: LsDocumentViewerCustomEvent<LSMutateEvent[]>) => void;
        "onPageChange"?: (event: LsDocumentViewerCustomEvent<number>) => void;
        "onPageRendered"?: (event: LsDocumentViewerCustomEvent<number>) => void;
        "onSelectFields"?: (event: LsDocumentViewerCustomEvent<LSApiElement[]>) => void;
        "onUpdate"?: (event: LsDocumentViewerCustomEvent<LSMutateEvent[]>) => void;
        /**
          * @default 1
         */
        "pageNum"?: number;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
          * @default false
         */
        "readonly"?: boolean;
        /**
          * Allows you to change the colours used for each role in the template. {SignerColor[]}
          * @default defaultRolePalette
         */
        "roleColors"?: string[];
        /**
          * Whether the page previewvertical ribbon will be shown {boolean}
          * @default false
         */
        "showpagepreview"?: boolean;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
          * @default false
         */
        "showrightpanel"?: boolean;
        /**
          * Whether the bottom statusbar is displayed. {boolean}
          * @default false
         */
        "showstatusbar"?: boolean;
        /**
          * Whether the table view of the fields on this template is available to the user. {boolean}
          * @default false
         */
        "showtableview"?: boolean;
        /**
          * Whether the top toolbar is displayed. {boolean}
          * @default false
         */
        "showtoolbar"?: boolean;
        /**
          * Whether the left hand toolbox is displayed. {boolean}
          * @default false
         */
        "showtoolbox"?: boolean;
        /**
          * @default 0
         */
        "signer"?: number;
        /**
          * The initial template data, including the link for background PDF. See README and example for correct GraphQL query and data structure. {LSApiTemplate}
         */
        "template"?: string;
        /**
          * The id of the template you want to load (if using the internal data adapter). {string}
         */
        "templateid"?: string;
        /**
          * The access token of the account your want the widget to use, you should normally acquire this with a server side call using that accounts login credentials. {string}
         */
        "token"?: string;
        /**
          * If supplied ONLY items in this | ("or") delimited list will be shown. i.e. "signature|intials" {boolean}
          * @default null
         */
        "toolboxFilter"?: string;
        /**
          * @default 1.0
         */
        "zoom"?: number;
    }
    interface LsEditorField {
        "dataItem"?: LSApiElement1;
        "page"?: { height: number; width: number };
        "palette"?: string[];
        "readonly"?: boolean;
        "selected"?: boolean;
        "type"?: 'text' | 'signature' | 'date' | 'regex' | 'file' | 'number' | 'autodate';
    }
    interface LsEditorTable {
        /**
          * The parent editor control. {LsDocumentViewer}
         */
        "editor"?: LsDocumentViewer;
    }
    interface LsFeatureColumn {
        /**
          * Determines / sets which of the far left 'managers' is active. {'document' | 'toolbox' | 'participant' }
          * @default 'toolbox'
         */
        "manager"?: 'document' | 'toolbox' | 'participant';
        "onManage"?: (event: LsFeatureColumnCustomEvent<'document' | 'toolbox' | 'participant'>) => void;
    }
    interface LsFieldAlignment {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldAlignmentCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldAlignmentCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldDimensions {
        "dataItem"?: LSApiElement1 | LSApiElement1[];
        "onMutate"?: (event: LsFieldDimensionsCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldDimensionsCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldDistribute {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldDistributeCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldDistributeCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldFormat {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldFormatCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldFormatCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldPlacement {
        "dataItem"?: LSApiElement1 | LSApiElement1[];
        "onMutate"?: (event: LsFieldPlacementCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldPlacementCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldProperties {
        "dataItem"?: LSApiElement[];
    }
    interface LsFieldPropertiesAutosign {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesDate {
        "dataItem"?: LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet"?: 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesEmail {
        "dataItem"?: LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet"?: 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesFile {
        "dataItem"?: LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet"?: 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesGeneral {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesImage {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesMultiple {
        "dataItem"?: LSApiElement1[];
    }
    interface LsFieldPropertiesNumber {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesSignature {
        "dataItem"?: LSApiElement1;
        /**
          * @default 'content'
         */
        "fieldSet"?: 'content' | 'placement' | 'dimensions';
    }
    interface LsFieldPropertiesText {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldSize {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldSizeCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldSizeCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFormfield {
        "aria"?: string;
        /**
          * @default 'text'
         */
        "as"?: 'text' | 'select' | 'radio' | 'textarea' | 'password' | 'number' | 'displayonly';
        "buttonClick"?: () => void;
        "buttonIcon"?: Icon;
        "count"?: boolean;
        "countMax"?: number;
        "descriptionText"?: string;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "errorText"?: string;
        /**
          * @default 'none'
         */
        "extraLabel"?: 'optional' | 'required' | 'none';
        "fieldIcon"?: Icon;
        "fieldId"?: string;
        "hoverTooltipText"?: string;
        "infoTooltipText"?: string;
        "inputRef"?: string;
        "label"?: string;
        "labelIcon"?: Icon;
        "name"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "valid"?: boolean;
        "value"?: string | number;
    }
    interface LsIcon {
        "customStyle"?: { [key: string]: string };
        "name"?: Icon;
        /**
          * @default "20"
         */
        "size"?: string;
        /**
          * @default false
         */
        "solid"?: boolean;
    }
    interface LsNumberInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "countMax"?: number;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        /**
          * @default 'ls'
         */
        "type"?: 'basic' | 'ls';
        "valid"?: boolean;
        /**
          * @default 0
         */
        "value"?: number;
    }
    interface LsParticipantManager {
        /**
          * The base template information (as JSON). {LSDocumentViewer}
         */
        "editor"?: LsDocumentViewer;
        "onMutate"?: (event: LsParticipantManagerCustomEvent<LSMutateEvent[]>) => void;
        "onUpdate"?: (event: LsParticipantManagerCustomEvent<LSMutateEvent[]>) => void;
        /**
          * The base template information (as JSON). {LSApiTemplate}
         */
        "template"?: LSApiTemplate;
    }
    interface LsParticipantSelect {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsParticipantSelectCustomEvent<LSMutateEvent1[]>) => void;
        "onRoleChange"?: (event: LsParticipantSelectCustomEvent<number>) => void;
        "onUpdate"?: (event: LsParticipantSelectCustomEvent<LSMutateEvent1[]>) => void;
        /**
          * The current template roles. {LSApiRole}
          * @default []
         */
        "roles"?: LSApiRole[];
    }
    interface LsRadioInput {
        /**
          * @default false
         */
        "checked"?: boolean;
        "customStyle"?: { [key: string]: string };
        /**
          * @default false
         */
        "disabled"?: boolean;
        "icon"?: Icon;
        "label"?: string;
        /**
          * @default 'name'
         */
        "name"?: string;
        "radioId"?: string;
    }
    interface LsSelectInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "displayOnly"?: boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name"?: string;
        "required"?: boolean;
        "valid"?: boolean;
        "value"?: string;
    }
    interface LsStatusbar {
        /**
          * The parent editor control. {LsDocumentViewer}
         */
        "editor"?: LsDocumentViewer;
        /**
          * The zoom or scale level 100 === 100%. {number}
         */
        "zoom"?: number;
    }
    interface LsTextInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "countMax"?: number;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        /**
          * @default 'default'
         */
        "type"?: 'default' | 'password' | 'displayonly';
        "valid"?: boolean;
        "value"?: string;
    }
    interface LsTextareaInput {
        "aria"?: string;
        "buttonClick"?: any;
        "buttonIcon"?: Icon;
        "countMax"?: number;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "displayOnly"?: boolean;
        "fieldIcon"?: Icon;
        "inputRef"?: string;
        "name"?: string;
        "placeholder"?: string;
        "required"?: boolean;
        "valid"?: boolean;
        "value"?: string;
    }
    interface LsToggle {
    }
    interface LsToolbar {
        /**
          * The selected items information (as JSON). {LSApiElement[]}
         */
        "dataItem"?: LSApiElement1[];
        /**
          * The base template information (as JSON). {LSDocumentViewer}
         */
        "editor"?: LsDocumentViewer1;
        "onMutate"?: (event: LsToolbarCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsToolbarCustomEvent<LSMutateEvent1[]>) => void;
        /**
          * The base template information (as JSON). {LSApiTemplate}
         */
        "template"?: LSApiTemplate1;
    }
    interface LsToolboxField {
        /**
          * The signer color of the element
          * @default 'primary'
         */
        "color"?: string;
        /**
          * The starting height of this control type in pixels.
         */
        "defaultHeight"?: number;
        /**
          * The starting width of this control type in pixels.
         */
        "defaultWidth"?: number;
        "elementType"?: string;
        /**
          * The field type of this toolbox item, e.g. 'signature'. Note these should always be lowercase.
         */
        "formElementType"?: string;
        /**
          * The icon to display for this field type.
         */
        "icon"?: Icon;
        /**
          * The text to display for this field type.
         */
        "label"?: string;
        /**
          * @default 0
         */
        "validation"?: number;
    }
    interface IntrinsicElements {
        "ls-document-options": LsDocumentOptions;
        "ls-document-viewer": LsDocumentViewer;
        "ls-editor-field": LsEditorField;
        "ls-editor-table": LsEditorTable;
        "ls-feature-column": LsFeatureColumn;
        "ls-field-alignment": LsFieldAlignment;
        "ls-field-dimensions": LsFieldDimensions;
        "ls-field-distribute": LsFieldDistribute;
        "ls-field-format": LsFieldFormat;
        "ls-field-placement": LsFieldPlacement;
        "ls-field-properties": LsFieldProperties;
        "ls-field-properties-autosign": LsFieldPropertiesAutosign;
        "ls-field-properties-date": LsFieldPropertiesDate;
        "ls-field-properties-email": LsFieldPropertiesEmail;
        "ls-field-properties-file": LsFieldPropertiesFile;
        "ls-field-properties-general": LsFieldPropertiesGeneral;
        "ls-field-properties-image": LsFieldPropertiesImage;
        "ls-field-properties-multiple": LsFieldPropertiesMultiple;
        "ls-field-properties-number": LsFieldPropertiesNumber;
        "ls-field-properties-signature": LsFieldPropertiesSignature;
        "ls-field-properties-text": LsFieldPropertiesText;
        "ls-field-size": LsFieldSize;
        "ls-formfield": LsFormfield;
        "ls-icon": LsIcon;
        "ls-number-input": LsNumberInput;
        "ls-participant-manager": LsParticipantManager;
        "ls-participant-select": LsParticipantSelect;
        "ls-radio-input": LsRadioInput;
        "ls-select-input": LsSelectInput;
        "ls-statusbar": LsStatusbar;
        "ls-text-input": LsTextInput;
        "ls-textarea-input": LsTextareaInput;
        "ls-toggle": LsToggle;
        "ls-toolbar": LsToolbar;
        "ls-toolbox-field": LsToolboxField;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ls-document-options": LocalJSX.LsDocumentOptions & JSXBase.HTMLAttributes<HTMLLsDocumentOptionsElement>;
            /**
             * The Legalesign page viewer converted to stencil. To use pass the standard
             * Template information from GraphQL (see Readme).
             * Alex Weinle
             */
            "ls-document-viewer": LocalJSX.LsDocumentViewer & JSXBase.HTMLAttributes<HTMLLsDocumentViewerElement>;
            "ls-editor-field": LocalJSX.LsEditorField & JSXBase.HTMLAttributes<HTMLLsEditorFieldElement>;
            "ls-editor-table": LocalJSX.LsEditorTable & JSXBase.HTMLAttributes<HTMLLsEditorTableElement>;
            "ls-feature-column": LocalJSX.LsFeatureColumn & JSXBase.HTMLAttributes<HTMLLsFeatureColumnElement>;
            "ls-field-alignment": LocalJSX.LsFieldAlignment & JSXBase.HTMLAttributes<HTMLLsFieldAlignmentElement>;
            "ls-field-dimensions": LocalJSX.LsFieldDimensions & JSXBase.HTMLAttributes<HTMLLsFieldDimensionsElement>;
            "ls-field-distribute": LocalJSX.LsFieldDistribute & JSXBase.HTMLAttributes<HTMLLsFieldDistributeElement>;
            "ls-field-format": LocalJSX.LsFieldFormat & JSXBase.HTMLAttributes<HTMLLsFieldFormatElement>;
            "ls-field-placement": LocalJSX.LsFieldPlacement & JSXBase.HTMLAttributes<HTMLLsFieldPlacementElement>;
            "ls-field-properties": LocalJSX.LsFieldProperties & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesElement>;
            "ls-field-properties-autosign": LocalJSX.LsFieldPropertiesAutosign & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesAutosignElement>;
            "ls-field-properties-date": LocalJSX.LsFieldPropertiesDate & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesDateElement>;
            "ls-field-properties-email": LocalJSX.LsFieldPropertiesEmail & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesEmailElement>;
            "ls-field-properties-file": LocalJSX.LsFieldPropertiesFile & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesFileElement>;
            "ls-field-properties-general": LocalJSX.LsFieldPropertiesGeneral & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesGeneralElement>;
            "ls-field-properties-image": LocalJSX.LsFieldPropertiesImage & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesImageElement>;
            "ls-field-properties-multiple": LocalJSX.LsFieldPropertiesMultiple & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesMultipleElement>;
            "ls-field-properties-number": LocalJSX.LsFieldPropertiesNumber & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesNumberElement>;
            "ls-field-properties-signature": LocalJSX.LsFieldPropertiesSignature & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesSignatureElement>;
            "ls-field-properties-text": LocalJSX.LsFieldPropertiesText & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesTextElement>;
            "ls-field-size": LocalJSX.LsFieldSize & JSXBase.HTMLAttributes<HTMLLsFieldSizeElement>;
            "ls-formfield": LocalJSX.LsFormfield & JSXBase.HTMLAttributes<HTMLLsFormfieldElement>;
            "ls-icon": LocalJSX.LsIcon & JSXBase.HTMLAttributes<HTMLLsIconElement>;
            "ls-number-input": LocalJSX.LsNumberInput & JSXBase.HTMLAttributes<HTMLLsNumberInputElement>;
            "ls-participant-manager": LocalJSX.LsParticipantManager & JSXBase.HTMLAttributes<HTMLLsParticipantManagerElement>;
            "ls-participant-select": LocalJSX.LsParticipantSelect & JSXBase.HTMLAttributes<HTMLLsParticipantSelectElement>;
            "ls-radio-input": LocalJSX.LsRadioInput & JSXBase.HTMLAttributes<HTMLLsRadioInputElement>;
            "ls-select-input": LocalJSX.LsSelectInput & JSXBase.HTMLAttributes<HTMLLsSelectInputElement>;
            "ls-statusbar": LocalJSX.LsStatusbar & JSXBase.HTMLAttributes<HTMLLsStatusbarElement>;
            "ls-text-input": LocalJSX.LsTextInput & JSXBase.HTMLAttributes<HTMLLsTextInputElement>;
            "ls-textarea-input": LocalJSX.LsTextareaInput & JSXBase.HTMLAttributes<HTMLLsTextareaInputElement>;
            "ls-toggle": LocalJSX.LsToggle & JSXBase.HTMLAttributes<HTMLLsToggleElement>;
            "ls-toolbar": LocalJSX.LsToolbar & JSXBase.HTMLAttributes<HTMLLsToolbarElement>;
            "ls-toolbox-field": LocalJSX.LsToolboxField & JSXBase.HTMLAttributes<HTMLLsToolboxFieldElement>;
        }
    }
}
