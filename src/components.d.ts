/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LSApiElement } from "./types/LSApiElement";
import { LSMutateEvent } from "./types/LSMutateEvent";
import { LSApiElement as LSApiElement1, LSMutateEvent as LSMutateEvent1 } from "./components";
import { Icon } from "./types/Icon";
export { LSApiElement } from "./types/LSApiElement";
export { LSMutateEvent } from "./types/LSMutateEvent";
export { LSApiElement as LSApiElement1, LSMutateEvent as LSMutateEvent1 } from "./components";
export { Icon } from "./types/Icon";
export namespace Components {
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsEditor {
        /**
          * Page forward {MouseEvent} e
         */
        "pageNext": (e: MouseEvent) => Promise<void>;
        /**
          * Page backward e
         */
        "pagePrev": (e: MouseEvent) => Promise<void>;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
         */
        "readonly"?: boolean;
        /**
          * Allows you to change the colours used for each role in the template. {SignerColor[]}
         */
        "roleColors"?: RoleColor[];
        /**
          * Whether the page previewvertical ribbon will be shown {boolean}
         */
        "showpagepreview"?: boolean;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
         */
        "showrightpanel"?: boolean;
        /**
          * Whether the table view of the fields on this template is available to the user. {boolean}
         */
        "showtableview"?: boolean;
        /**
          * Whether the left hand toolbox is displayed. {boolean}
         */
        "showtoolbox"?: boolean;
        /**
          * The initial template data, including the link for background PDF. See README and example for correct GraphQL query and data structure. {LSApiTemplate}
         */
        "template": string;
        /**
          * If supplied ONLY items in this | ("or") delimited list will be shown. i.e. "signature|intials" {boolean}
         */
        "toolboxFilter"?: string;
    }
    interface LsEditorField {
        "dataItem": LSApiElement1;
        "page": { height: number, width: number};
        "readonly": boolean;
        "selected": boolean;
        "type": 'text' | 'signature' | 'date' | 'regex' | 'file' | 'number' | 'autodate';
    }
    interface LsFeatureColumn {
    }
    interface LsFieldAlignment {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldDimensions {
        "dataItem": LSApiElement1 | LSApiElement1[];
    }
    interface LsFieldDistribute {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldFormat {
        "dataItem": LSApiElement1;
    }
    interface LsFieldProperties {
        "dataItem": LSApiElement[];
    }
    interface LsFieldPropertiesDate {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesGeneral {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesMultiple {
        "dataItem": LSApiElement1[];
    }
    interface LsFieldPropertiesNumber {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesSignature {
        "dataItem": LSApiElement1;
    }
    interface LsFieldPropertiesText {
        "dataItem": LSApiElement1;
    }
    interface LsFieldSize {
        "dataItem": LSApiElement1[];
    }
    interface LsIcon {
        "customStyle"?: { [key: string]: string };
        "name"?: Icon;
        "size"?: string;
        "solid"?: boolean;
    }
    interface LsToolboxField {
        /**
          * The starting height of this control type in pixels.
         */
        "defaultHeight": number;
        /**
          * The starting width of this control type in pixels.
         */
        "defaultWidth": number;
        "elementType": string;
        /**
          * The field type of this toolbox item, e.g. 'signature'. Note these should always be lowercase.
         */
        "formElementType": string;
        /**
          * The text to display for this field type.
         */
        "label": string;
        "validation": number;
    }
}
export interface LsEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsEditorElement;
}
export interface LsFieldAlignmentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldAlignmentElement;
}
export interface LsFieldDimensionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldDimensionsElement;
}
export interface LsFieldDistributeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldDistributeElement;
}
export interface LsFieldSizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsFieldSizeElement;
}
declare global {
    interface HTMLLsEditorElementEventMap {
        "pageRendered": number;
        "pageChange": number;
        "select": LSApiElement[];
        "mutate": LSMutateEvent[];
        "update": LSMutateEvent[];
    }
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface HTMLLsEditorElement extends Components.LsEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsEditorElementEventMap>(type: K, listener: (this: HTMLLsEditorElement, ev: LsEditorCustomEvent<HTMLLsEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsEditorElementEventMap>(type: K, listener: (this: HTMLLsEditorElement, ev: LsEditorCustomEvent<HTMLLsEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsEditorElement: {
        prototype: HTMLLsEditorElement;
        new (): HTMLLsEditorElement;
    };
    interface HTMLLsEditorFieldElement extends Components.LsEditorField, HTMLStencilElement {
    }
    var HTMLLsEditorFieldElement: {
        prototype: HTMLLsEditorFieldElement;
        new (): HTMLLsEditorFieldElement;
    };
    interface HTMLLsFeatureColumnElement extends Components.LsFeatureColumn, HTMLStencilElement {
    }
    var HTMLLsFeatureColumnElement: {
        prototype: HTMLLsFeatureColumnElement;
        new (): HTMLLsFeatureColumnElement;
    };
    interface HTMLLsFieldAlignmentElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldAlignmentElement extends Components.LsFieldAlignment, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldAlignmentElementEventMap>(type: K, listener: (this: HTMLLsFieldAlignmentElement, ev: LsFieldAlignmentCustomEvent<HTMLLsFieldAlignmentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldAlignmentElementEventMap>(type: K, listener: (this: HTMLLsFieldAlignmentElement, ev: LsFieldAlignmentCustomEvent<HTMLLsFieldAlignmentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldAlignmentElement: {
        prototype: HTMLLsFieldAlignmentElement;
        new (): HTMLLsFieldAlignmentElement;
    };
    interface HTMLLsFieldDimensionsElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldDimensionsElement extends Components.LsFieldDimensions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldDimensionsElementEventMap>(type: K, listener: (this: HTMLLsFieldDimensionsElement, ev: LsFieldDimensionsCustomEvent<HTMLLsFieldDimensionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldDimensionsElementEventMap>(type: K, listener: (this: HTMLLsFieldDimensionsElement, ev: LsFieldDimensionsCustomEvent<HTMLLsFieldDimensionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldDimensionsElement: {
        prototype: HTMLLsFieldDimensionsElement;
        new (): HTMLLsFieldDimensionsElement;
    };
    interface HTMLLsFieldDistributeElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldDistributeElement extends Components.LsFieldDistribute, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldDistributeElementEventMap>(type: K, listener: (this: HTMLLsFieldDistributeElement, ev: LsFieldDistributeCustomEvent<HTMLLsFieldDistributeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldDistributeElementEventMap>(type: K, listener: (this: HTMLLsFieldDistributeElement, ev: LsFieldDistributeCustomEvent<HTMLLsFieldDistributeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldDistributeElement: {
        prototype: HTMLLsFieldDistributeElement;
        new (): HTMLLsFieldDistributeElement;
    };
    interface HTMLLsFieldFormatElement extends Components.LsFieldFormat, HTMLStencilElement {
    }
    var HTMLLsFieldFormatElement: {
        prototype: HTMLLsFieldFormatElement;
        new (): HTMLLsFieldFormatElement;
    };
    interface HTMLLsFieldPropertiesElement extends Components.LsFieldProperties, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesElement: {
        prototype: HTMLLsFieldPropertiesElement;
        new (): HTMLLsFieldPropertiesElement;
    };
    interface HTMLLsFieldPropertiesDateElement extends Components.LsFieldPropertiesDate, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesDateElement: {
        prototype: HTMLLsFieldPropertiesDateElement;
        new (): HTMLLsFieldPropertiesDateElement;
    };
    interface HTMLLsFieldPropertiesGeneralElement extends Components.LsFieldPropertiesGeneral, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesGeneralElement: {
        prototype: HTMLLsFieldPropertiesGeneralElement;
        new (): HTMLLsFieldPropertiesGeneralElement;
    };
    interface HTMLLsFieldPropertiesMultipleElement extends Components.LsFieldPropertiesMultiple, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesMultipleElement: {
        prototype: HTMLLsFieldPropertiesMultipleElement;
        new (): HTMLLsFieldPropertiesMultipleElement;
    };
    interface HTMLLsFieldPropertiesNumberElement extends Components.LsFieldPropertiesNumber, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesNumberElement: {
        prototype: HTMLLsFieldPropertiesNumberElement;
        new (): HTMLLsFieldPropertiesNumberElement;
    };
    interface HTMLLsFieldPropertiesSignatureElement extends Components.LsFieldPropertiesSignature, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesSignatureElement: {
        prototype: HTMLLsFieldPropertiesSignatureElement;
        new (): HTMLLsFieldPropertiesSignatureElement;
    };
    interface HTMLLsFieldPropertiesTextElement extends Components.LsFieldPropertiesText, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesTextElement: {
        prototype: HTMLLsFieldPropertiesTextElement;
        new (): HTMLLsFieldPropertiesTextElement;
    };
    interface HTMLLsFieldSizeElementEventMap {
        "mutate": LSMutateEvent1[];
        "update": LSMutateEvent1[];
    }
    interface HTMLLsFieldSizeElement extends Components.LsFieldSize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsFieldSizeElementEventMap>(type: K, listener: (this: HTMLLsFieldSizeElement, ev: LsFieldSizeCustomEvent<HTMLLsFieldSizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsFieldSizeElementEventMap>(type: K, listener: (this: HTMLLsFieldSizeElement, ev: LsFieldSizeCustomEvent<HTMLLsFieldSizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsFieldSizeElement: {
        prototype: HTMLLsFieldSizeElement;
        new (): HTMLLsFieldSizeElement;
    };
    interface HTMLLsIconElement extends Components.LsIcon, HTMLStencilElement {
    }
    var HTMLLsIconElement: {
        prototype: HTMLLsIconElement;
        new (): HTMLLsIconElement;
    };
    interface HTMLLsToolboxFieldElement extends Components.LsToolboxField, HTMLStencilElement {
    }
    var HTMLLsToolboxFieldElement: {
        prototype: HTMLLsToolboxFieldElement;
        new (): HTMLLsToolboxFieldElement;
    };
    interface HTMLElementTagNameMap {
        "ls-editor": HTMLLsEditorElement;
        "ls-editor-field": HTMLLsEditorFieldElement;
        "ls-feature-column": HTMLLsFeatureColumnElement;
        "ls-field-alignment": HTMLLsFieldAlignmentElement;
        "ls-field-dimensions": HTMLLsFieldDimensionsElement;
        "ls-field-distribute": HTMLLsFieldDistributeElement;
        "ls-field-format": HTMLLsFieldFormatElement;
        "ls-field-properties": HTMLLsFieldPropertiesElement;
        "ls-field-properties-date": HTMLLsFieldPropertiesDateElement;
        "ls-field-properties-general": HTMLLsFieldPropertiesGeneralElement;
        "ls-field-properties-multiple": HTMLLsFieldPropertiesMultipleElement;
        "ls-field-properties-number": HTMLLsFieldPropertiesNumberElement;
        "ls-field-properties-signature": HTMLLsFieldPropertiesSignatureElement;
        "ls-field-properties-text": HTMLLsFieldPropertiesTextElement;
        "ls-field-size": HTMLLsFieldSizeElement;
        "ls-icon": HTMLLsIconElement;
        "ls-toolbox-field": HTMLLsToolboxFieldElement;
    }
}
declare namespace LocalJSX {
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsEditor {
        "onMutate"?: (event: LsEditorCustomEvent<LSMutateEvent[]>) => void;
        "onPageChange"?: (event: LsEditorCustomEvent<number>) => void;
        "onPageRendered"?: (event: LsEditorCustomEvent<number>) => void;
        "onSelect"?: (event: LsEditorCustomEvent<LSApiElement[]>) => void;
        "onUpdate"?: (event: LsEditorCustomEvent<LSMutateEvent[]>) => void;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
         */
        "readonly"?: boolean;
        /**
          * Allows you to change the colours used for each role in the template. {SignerColor[]}
         */
        "roleColors"?: RoleColor[];
        /**
          * Whether the page previewvertical ribbon will be shown {boolean}
         */
        "showpagepreview"?: boolean;
        /**
          * Whether the right panel (which can be default field properties or custom panel) is displayed. {boolean}
         */
        "showrightpanel"?: boolean;
        /**
          * Whether the table view of the fields on this template is available to the user. {boolean}
         */
        "showtableview"?: boolean;
        /**
          * Whether the left hand toolbox is displayed. {boolean}
         */
        "showtoolbox"?: boolean;
        /**
          * The initial template data, including the link for background PDF. See README and example for correct GraphQL query and data structure. {LSApiTemplate}
         */
        "template"?: string;
        /**
          * If supplied ONLY items in this | ("or") delimited list will be shown. i.e. "signature|intials" {boolean}
         */
        "toolboxFilter"?: string;
    }
    interface LsEditorField {
        "dataItem"?: LSApiElement1;
        "page"?: { height: number, width: number};
        "readonly"?: boolean;
        "selected"?: boolean;
        "type"?: 'text' | 'signature' | 'date' | 'regex' | 'file' | 'number' | 'autodate';
    }
    interface LsFeatureColumn {
    }
    interface LsFieldAlignment {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldAlignmentCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldAlignmentCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldDimensions {
        "dataItem"?: LSApiElement1 | LSApiElement1[];
        "onMutate"?: (event: LsFieldDimensionsCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldDimensionsCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldDistribute {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldDistributeCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldDistributeCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsFieldFormat {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldProperties {
        "dataItem"?: LSApiElement[];
    }
    interface LsFieldPropertiesDate {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesGeneral {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesMultiple {
        "dataItem"?: LSApiElement1[];
    }
    interface LsFieldPropertiesNumber {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesSignature {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldPropertiesText {
        "dataItem"?: LSApiElement1;
    }
    interface LsFieldSize {
        "dataItem"?: LSApiElement1[];
        "onMutate"?: (event: LsFieldSizeCustomEvent<LSMutateEvent1[]>) => void;
        "onUpdate"?: (event: LsFieldSizeCustomEvent<LSMutateEvent1[]>) => void;
    }
    interface LsIcon {
        "customStyle"?: { [key: string]: string };
        "name"?: Icon;
        "size"?: string;
        "solid"?: boolean;
    }
    interface LsToolboxField {
        /**
          * The starting height of this control type in pixels.
         */
        "defaultHeight"?: number;
        /**
          * The starting width of this control type in pixels.
         */
        "defaultWidth"?: number;
        "elementType"?: string;
        /**
          * The field type of this toolbox item, e.g. 'signature'. Note these should always be lowercase.
         */
        "formElementType"?: string;
        /**
          * The text to display for this field type.
         */
        "label"?: string;
        "validation"?: number;
    }
    interface IntrinsicElements {
        "ls-editor": LsEditor;
        "ls-editor-field": LsEditorField;
        "ls-feature-column": LsFeatureColumn;
        "ls-field-alignment": LsFieldAlignment;
        "ls-field-dimensions": LsFieldDimensions;
        "ls-field-distribute": LsFieldDistribute;
        "ls-field-format": LsFieldFormat;
        "ls-field-properties": LsFieldProperties;
        "ls-field-properties-date": LsFieldPropertiesDate;
        "ls-field-properties-general": LsFieldPropertiesGeneral;
        "ls-field-properties-multiple": LsFieldPropertiesMultiple;
        "ls-field-properties-number": LsFieldPropertiesNumber;
        "ls-field-properties-signature": LsFieldPropertiesSignature;
        "ls-field-properties-text": LsFieldPropertiesText;
        "ls-field-size": LsFieldSize;
        "ls-icon": LsIcon;
        "ls-toolbox-field": LsToolboxField;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The Legalesign page viewer converted to stencil. To use pass the standard
             * Template information from GraphQL (see Readme).
             * Alex Weinle
             */
            "ls-editor": LocalJSX.LsEditor & JSXBase.HTMLAttributes<HTMLLsEditorElement>;
            "ls-editor-field": LocalJSX.LsEditorField & JSXBase.HTMLAttributes<HTMLLsEditorFieldElement>;
            "ls-feature-column": LocalJSX.LsFeatureColumn & JSXBase.HTMLAttributes<HTMLLsFeatureColumnElement>;
            "ls-field-alignment": LocalJSX.LsFieldAlignment & JSXBase.HTMLAttributes<HTMLLsFieldAlignmentElement>;
            "ls-field-dimensions": LocalJSX.LsFieldDimensions & JSXBase.HTMLAttributes<HTMLLsFieldDimensionsElement>;
            "ls-field-distribute": LocalJSX.LsFieldDistribute & JSXBase.HTMLAttributes<HTMLLsFieldDistributeElement>;
            "ls-field-format": LocalJSX.LsFieldFormat & JSXBase.HTMLAttributes<HTMLLsFieldFormatElement>;
            "ls-field-properties": LocalJSX.LsFieldProperties & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesElement>;
            "ls-field-properties-date": LocalJSX.LsFieldPropertiesDate & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesDateElement>;
            "ls-field-properties-general": LocalJSX.LsFieldPropertiesGeneral & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesGeneralElement>;
            "ls-field-properties-multiple": LocalJSX.LsFieldPropertiesMultiple & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesMultipleElement>;
            "ls-field-properties-number": LocalJSX.LsFieldPropertiesNumber & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesNumberElement>;
            "ls-field-properties-signature": LocalJSX.LsFieldPropertiesSignature & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesSignatureElement>;
            "ls-field-properties-text": LocalJSX.LsFieldPropertiesText & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesTextElement>;
            "ls-field-size": LocalJSX.LsFieldSize & JSXBase.HTMLAttributes<HTMLLsFieldSizeElement>;
            "ls-icon": LocalJSX.LsIcon & JSXBase.HTMLAttributes<HTMLLsIconElement>;
            "ls-toolbox-field": LocalJSX.LsToolboxField & JSXBase.HTMLAttributes<HTMLLsToolboxFieldElement>;
        }
    }
}
