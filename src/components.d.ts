/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * The basic Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsEditor {
        /**
          * The intial data for the template.
         */
        "initialData": object;
        /**
          * Page forward {MouseEvent} e
         */
        "pageNext": (e: MouseEvent) => Promise<void>;
        /**
          * Page backward e
         */
        "pagePrev": (e: MouseEvent) => Promise<void>;
        /**
          * Rotate the PDF in degrees {number}
         */
        "rotation": 0 | 90 | 180 | 270 | 360;
        /**
          * Src of the PDF to load and render {number}
         */
        "src"?: string;
        /**
          * The template title
         */
        "templateTitle": string;
    }
    interface LsSender {
    }
}
export interface LsEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsEditorElement;
}
declare global {
    interface HTMLLsEditorElementEventMap {
        "pageRendered": number;
        "pageChange": number;
        "fieldChange": object;
    }
    /**
     * The basic Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface HTMLLsEditorElement extends Components.LsEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsEditorElementEventMap>(type: K, listener: (this: HTMLLsEditorElement, ev: LsEditorCustomEvent<HTMLLsEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsEditorElementEventMap>(type: K, listener: (this: HTMLLsEditorElement, ev: LsEditorCustomEvent<HTMLLsEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsEditorElement: {
        prototype: HTMLLsEditorElement;
        new (): HTMLLsEditorElement;
    };
    interface HTMLLsSenderElement extends Components.LsSender, HTMLStencilElement {
    }
    var HTMLLsSenderElement: {
        prototype: HTMLLsSenderElement;
        new (): HTMLLsSenderElement;
    };
    interface HTMLElementTagNameMap {
        "ls-editor": HTMLLsEditorElement;
        "ls-sender": HTMLLsSenderElement;
    }
}
declare namespace LocalJSX {
    /**
     * The basic Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsEditor {
        /**
          * The intial data for the template.
         */
        "initialData"?: object;
        /**
          * The field change event. Bind this to a mutation.
         */
        "onFieldChange"?: (event: LsEditorCustomEvent<object>) => void;
        "onPageChange"?: (event: LsEditorCustomEvent<number>) => void;
        "onPageRendered"?: (event: LsEditorCustomEvent<number>) => void;
        /**
          * Rotate the PDF in degrees {number}
         */
        "rotation"?: 0 | 90 | 180 | 270 | 360;
        /**
          * Src of the PDF to load and render {number}
         */
        "src"?: string;
        /**
          * The template title
         */
        "templateTitle"?: string;
    }
    interface LsSender {
    }
    interface IntrinsicElements {
        "ls-editor": LsEditor;
        "ls-sender": LsSender;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The basic Legalesign page viewer converted to stencil. To use pass the standard
             * Template information from GraphQL (see Readme).
             * Alex Weinle
             */
            "ls-editor": LocalJSX.LsEditor & JSXBase.HTMLAttributes<HTMLLsEditorElement>;
            "ls-sender": LocalJSX.LsSender & JSXBase.HTMLAttributes<HTMLLsSenderElement>;
        }
    }
}
