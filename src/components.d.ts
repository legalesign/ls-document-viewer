/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { LSApiElement } from "./types/LSApiElement";
import { LSApiElement as LSApiElement1 } from "./components";
export { LSApiElement } from "./types/LSApiElement";
export { LSApiElement as LSApiElement1 } from "./components";
export namespace Components {
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsEditor {
        /**
          * Page forward {MouseEvent} e
         */
        "pageNext": (e: MouseEvent) => Promise<void>;
        /**
          * Page backward e
         */
        "pagePrev": (e: MouseEvent) => Promise<void>;
        /**
          * Allows you to change the colours used for each role in the template. {SignerColor[]}
         */
        "roleColors"?: RoleColor[];
        /**
          * Whether the left hand toolbox is displayed. {boolean}
         */
        "showtoolbox"?: boolean;
        /**
          * The initial template data, including the link for background PDF. See README and example for correct GraphQL query and data structure. {LSApiTemplate}
         */
        "template": string;
        /**
          * If supplied ONLY items in this | ("or") delimited list will be shown. i.e. "signature|intials" {boolean}
         */
        "toolboxFilter"?: string;
    }
    interface LsEditorField {
        "dataItem": LSApiElement1;
        "page": { height: number, width: number};
        "selected": boolean;
        "type": 'text' | 'signature' | 'date' | 'regex' | 'file' | 'number' | 'autodate';
    }
    interface LsFieldProperties {
        "dataItem": LSApiElement[];
    }
    interface LsSend {
        "format": 'compact' | 'standard';
    }
    interface LsSender {
    }
    interface LsToolboxField {
        /**
          * The starting height of this control type in pixels.
         */
        "defaultHeight": number;
        /**
          * The starting width of this control type in pixels.
         */
        "defaultWidth": number;
        "elementType": string;
        /**
          * The field type of this toolbox item, e.g. 'signature'. Note these should always be lowercase.
         */
        "formElementType": string;
        /**
          * The text to display for this field type.
         */
        "label": string;
        "validation": number;
    }
    interface LsZoomBox {
    }
}
export interface LsEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLsEditorElement;
}
declare global {
    interface HTMLLsEditorElementEventMap {
        "pageRendered": number;
        "pageChange": number;
        "onSelect": LSApiElement[];
        "onChange": LSApiElement[];
    }
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface HTMLLsEditorElement extends Components.LsEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLsEditorElementEventMap>(type: K, listener: (this: HTMLLsEditorElement, ev: LsEditorCustomEvent<HTMLLsEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLsEditorElementEventMap>(type: K, listener: (this: HTMLLsEditorElement, ev: LsEditorCustomEvent<HTMLLsEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLsEditorElement: {
        prototype: HTMLLsEditorElement;
        new (): HTMLLsEditorElement;
    };
    interface HTMLLsEditorFieldElement extends Components.LsEditorField, HTMLStencilElement {
    }
    var HTMLLsEditorFieldElement: {
        prototype: HTMLLsEditorFieldElement;
        new (): HTMLLsEditorFieldElement;
    };
    interface HTMLLsFieldPropertiesElement extends Components.LsFieldProperties, HTMLStencilElement {
    }
    var HTMLLsFieldPropertiesElement: {
        prototype: HTMLLsFieldPropertiesElement;
        new (): HTMLLsFieldPropertiesElement;
    };
    interface HTMLLsSendElement extends Components.LsSend, HTMLStencilElement {
    }
    var HTMLLsSendElement: {
        prototype: HTMLLsSendElement;
        new (): HTMLLsSendElement;
    };
    interface HTMLLsSenderElement extends Components.LsSender, HTMLStencilElement {
    }
    var HTMLLsSenderElement: {
        prototype: HTMLLsSenderElement;
        new (): HTMLLsSenderElement;
    };
    interface HTMLLsToolboxFieldElement extends Components.LsToolboxField, HTMLStencilElement {
    }
    var HTMLLsToolboxFieldElement: {
        prototype: HTMLLsToolboxFieldElement;
        new (): HTMLLsToolboxFieldElement;
    };
    interface HTMLLsZoomBoxElement extends Components.LsZoomBox, HTMLStencilElement {
    }
    var HTMLLsZoomBoxElement: {
        prototype: HTMLLsZoomBoxElement;
        new (): HTMLLsZoomBoxElement;
    };
    interface HTMLElementTagNameMap {
        "ls-editor": HTMLLsEditorElement;
        "ls-editor-field": HTMLLsEditorFieldElement;
        "ls-field-properties": HTMLLsFieldPropertiesElement;
        "ls-send": HTMLLsSendElement;
        "ls-sender": HTMLLsSenderElement;
        "ls-toolbox-field": HTMLLsToolboxFieldElement;
        "ls-zoom-box": HTMLLsZoomBoxElement;
    }
}
declare namespace LocalJSX {
    /**
     * The Legalesign page viewer converted to stencil. To use pass the standard
     * Template information from GraphQL (see Readme).
     * Alex Weinle
     */
    interface LsEditor {
        "onOnChange"?: (event: LsEditorCustomEvent<LSApiElement[]>) => void;
        "onOnSelect"?: (event: LsEditorCustomEvent<LSApiElement[]>) => void;
        "onPageChange"?: (event: LsEditorCustomEvent<number>) => void;
        "onPageRendered"?: (event: LsEditorCustomEvent<number>) => void;
        /**
          * Allows you to change the colours used for each role in the template. {SignerColor[]}
         */
        "roleColors"?: RoleColor[];
        /**
          * Whether the left hand toolbox is displayed. {boolean}
         */
        "showtoolbox"?: boolean;
        /**
          * The initial template data, including the link for background PDF. See README and example for correct GraphQL query and data structure. {LSApiTemplate}
         */
        "template"?: string;
        /**
          * If supplied ONLY items in this | ("or") delimited list will be shown. i.e. "signature|intials" {boolean}
         */
        "toolboxFilter"?: string;
    }
    interface LsEditorField {
        "dataItem"?: LSApiElement1;
        "page"?: { height: number, width: number};
        "selected"?: boolean;
        "type"?: 'text' | 'signature' | 'date' | 'regex' | 'file' | 'number' | 'autodate';
    }
    interface LsFieldProperties {
        "dataItem"?: LSApiElement[];
    }
    interface LsSend {
        "format"?: 'compact' | 'standard';
    }
    interface LsSender {
    }
    interface LsToolboxField {
        /**
          * The starting height of this control type in pixels.
         */
        "defaultHeight"?: number;
        /**
          * The starting width of this control type in pixels.
         */
        "defaultWidth"?: number;
        "elementType"?: string;
        /**
          * The field type of this toolbox item, e.g. 'signature'. Note these should always be lowercase.
         */
        "formElementType"?: string;
        /**
          * The text to display for this field type.
         */
        "label"?: string;
        "validation"?: number;
    }
    interface LsZoomBox {
    }
    interface IntrinsicElements {
        "ls-editor": LsEditor;
        "ls-editor-field": LsEditorField;
        "ls-field-properties": LsFieldProperties;
        "ls-send": LsSend;
        "ls-sender": LsSender;
        "ls-toolbox-field": LsToolboxField;
        "ls-zoom-box": LsZoomBox;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * The Legalesign page viewer converted to stencil. To use pass the standard
             * Template information from GraphQL (see Readme).
             * Alex Weinle
             */
            "ls-editor": LocalJSX.LsEditor & JSXBase.HTMLAttributes<HTMLLsEditorElement>;
            "ls-editor-field": LocalJSX.LsEditorField & JSXBase.HTMLAttributes<HTMLLsEditorFieldElement>;
            "ls-field-properties": LocalJSX.LsFieldProperties & JSXBase.HTMLAttributes<HTMLLsFieldPropertiesElement>;
            "ls-send": LocalJSX.LsSend & JSXBase.HTMLAttributes<HTMLLsSendElement>;
            "ls-sender": LocalJSX.LsSender & JSXBase.HTMLAttributes<HTMLLsSenderElement>;
            "ls-toolbox-field": LocalJSX.LsToolboxField & JSXBase.HTMLAttributes<HTMLLsToolboxFieldElement>;
            "ls-zoom-box": LocalJSX.LsZoomBox & JSXBase.HTMLAttributes<HTMLLsZoomBoxElement>;
        }
    }
}
